{"version":3,"sources":["webpack:///./frontend/pages/projects.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./frontend/components/Navbar.tsx","webpack:///./frontend/components/Layout.tsx"],"names":["withLayout","allMarkdownRemark","data","pathname","location","nodes","edges","map","edge","node","className","html","frontmatter","title","theme","status","demo","source","slug","fields","data-active","key","data-status","style","color","dangerouslySetInnerHTML","__html","href","rel","target","icon","backgroundColor","to","src","alt","query","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","pageResources","createElement","InternalPageRenderer","json","Navbar","id","withPrefix","includes","Layout","children","WrappedComponent","props"],"mappings":"0LA4DeA,uBAlDE,SAAC,GAGL,IAFHC,EAEG,EAFXC,KAAQD,kBACIE,EACD,EADXC,SAAYD,SAENE,EAAQJ,EAAkBK,MAAMC,KAAI,SAACC,GAAD,wBAAgBA,EAAKC,SAE/D,OACE,uBAAKC,UAAU,qBACb,2BACGL,EAAME,KACL,gBACEI,EADF,EACEA,KADF,IAEEC,YAAeC,EAFjB,EAEiBA,MAAOC,EAFxB,EAEwBA,MAAOC,EAF/B,EAE+BA,OAAQC,EAFvC,EAEuCA,KAAMC,EAF7C,EAE6CA,OACjCC,EAHZ,EAGEC,OAAUD,KAHZ,OAKE,uBACER,UAAU,oBACVU,cAAaF,IAASf,EACtBkB,IAAKR,GAEL,sBAAIS,cAAaP,EAAQQ,MAAO,CAAEC,MAAOV,IACtCD,GAEH,uBAEEY,wBAAyB,CAAEC,OAAQf,KAErC,qBAAGgB,KAAMX,EAAMY,IAAI,sBAAsBC,OAAO,UAC9C,kCAEF,qBAAGF,KAAMV,EAAQW,IAAI,sBAAsBC,OAAO,UAChD,yCAMV,uBAAKnB,UAAU,mBACZL,EAAME,KACL,oBAAGK,YAAeC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,MAAzB,IAAkCK,OAAUD,EAA5C,EAA4CA,KAAMY,EAAlD,EAAkDA,KAAlD,OACE,gBAAC,IAAD,CAAMP,MAAO,CAAEQ,gBAAiBjB,GAASkB,GAAId,EAAMG,IAAKH,GACtD,uBAAKe,IAAKH,EAAMI,IAAKrB,aAW5B,IAAMsB,EAAQ,c,kCC9DrB,mJAcyBC,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BzC,EAA8B,EAA9BA,SAAU0C,EAAoB,EAApBA,cACpC,OAAKA,EAGER,IAAMS,cAAcC,IAApB,eACL5C,WACA0C,iBACGA,EAAcG,OALV,O,oFC6BIC,EA7BA,SAAC,GAAwB,IAAtB/C,EAAsB,EAAtBA,SAMhB,OACE,uBAAKO,UAAU,mBACb,sBAAIA,UAAU,iBAAd,OACA,uBAAKA,UAAU,iBARL,CACZ,CAAEyC,GAAI,QAASnB,GAAI,KACnB,CAAEmB,GAAI,WAAYnB,GAAI,cAOXzB,KAAI,gBAAG4C,EAAH,EAAGA,GAAInB,EAAP,EAAOA,GAAP,OACT,gBAAC,IAAD,CACEtB,UAAU,eACVU,cACS,MAAPY,EACI7B,IAAaiD,YAAWpB,GACxB7B,EAASkD,SAASD,YAAWpB,IAEnCX,IAAK8B,EACLnB,GAAIA,GAEHmB,SC5Bb,kCAWA,IAAMG,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUnD,EAAb,EAAaA,SAAb,OACb,uBAAKM,UAAU,mBACb,gBAAC,EAAD,CAAQP,SAAUC,EAASD,WAC3B,uBAAKO,UAAU,oBAAoB6C,KAI1BvD,EAAa,SACxBwD,GADwB,OAErB,SAACC,GAAD,OACH,gBAAC,EAAD,CAAQrD,SAAUqD,EAAMrD,UACtB,gBAACoD,EAAqBC","file":"component---frontend-pages-projects-tsx-f9e0e37c9660bdcbb7bd.js","sourcesContent":["import * as React from 'react'\nimport { graphql, Link } from 'gatsby'\n\nimport { withLayout, LayoutProps } from 'components/Layout'\nimport { Query } from 'types/graphql'\n\ninterface Props extends LayoutProps {\n  data: Query,\n}\n\nconst Projects = ({\n  data: { allMarkdownRemark },\n  location: { pathname },\n}: Props) => {\n  const nodes = allMarkdownRemark.edges.map((edge) => ({ ...edge.node }))\n\n  return (\n    <div className=\"projects__wrapper\">\n      <div>\n        {nodes.map(\n          ({\n            html,\n            frontmatter: { title, theme, status, demo, source },\n            fields: { slug },\n          }) => (\n            <div\n              className=\"projects__content\"\n              data-active={slug === pathname}\n              key={title}\n            >\n              <h2 data-status={status} style={{ color: theme }}>\n                {title}\n              </h2>\n              <div\n                // eslint-disable-next-line react/no-danger\n                dangerouslySetInnerHTML={{ __html: html }}\n              />\n              <a href={demo} rel=\"noopener noreferrer\" target=\"_blank\">\n                <p>demo</p>\n              </a>\n              <a href={source} rel=\"noopener noreferrer\" target=\"_blank\">\n                <p>source</p>\n              </a>\n            </div>\n          ),\n        )}\n      </div>\n      <div className=\"projects__cards\">\n        {nodes.map(\n          ({ frontmatter: { title, theme }, fields: { slug, icon } }) => (\n            <Link style={{ backgroundColor: theme }} to={slug} key={slug}>\n              <img src={icon} alt={title} />\n            </Link>\n          ),\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withLayout(Projects)\n\nexport const query = graphql`\n  query ProjectsQuery {\n    allMarkdownRemark(\n      filter: { fields: { slug: { regex: \"//projects//\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            theme\n            date\n            status\n            demo\n            source\n          }\n          fields {\n            slug\n            icon\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\nimport { Link, withPrefix } from 'gatsby'\n\ninterface Props {\n  pathname: string\n}\n\nconst Navbar = ({ pathname }: Props) => {\n  const links = [\n    { id: 'About', to: '/' },\n    { id: 'Projects', to: '/projects' },\n  ]\n\n  return (\n    <div className=\"navbar__wrapper\">\n      <h1 className=\"navbar__title\">HAN</h1>\n      <nav className=\"navbar__links\">\n        {links.map(({ id, to }) => (\n          <Link\n            className=\"navbar__link\"\n            data-active={\n              to === '/'\n                ? pathname === withPrefix(to)\n                : pathname.includes(withPrefix(to))\n            }\n            key={id}\n            to={to}\n          >\n            {id}\n          </Link>\n        ))}\n      </nav>\n    </div>\n  )\n}\n\nexport default Navbar\n","import * as React from 'react'\n\nimport Navbar from 'components/Navbar'\n\nexport interface LayoutProps {\n  children: React.ReactNode\n  location: {\n    pathname: string\n  }\n}\n\nconst Layout = ({ children, location }: LayoutProps) => (\n  <div className=\"layout__wrapper\">\n    <Navbar pathname={location.pathname} />\n    <div className=\"layout__children\">{children}</div>\n  </div>\n)\n\nexport const withLayout = <P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n) => (props: P & LayoutProps) => (\n  <Layout location={props.location}>\n    <WrappedComponent {...props} />\n  </Layout>\n)\n\nexport default Layout\n"],"sourceRoot":""}